//Package NeexTrx comment
// This file war generated by tars2go 1.1
// Generated from FreezingSys.tars
package NeexTrx

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//FreezingSys struct
type FreezingSys struct {
	s m.Servant
}

//User_into_dc2 is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) User_into_dc2(Addr string, Symbol string, Hash string, Amount string, Type int32, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Addr, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Hash, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Type, 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "user_into_dc2", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//User_into_dc2WithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) User_into_dc2WithContext(ctx context.Context, Addr string, Symbol string, Hash string, Amount string, Type int32, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Addr, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Hash, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Type, 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "user_into_dc2", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//Commit_withdraw_dc is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) Commit_withdraw_dc(Hash string, Symbol string, Amount string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "commit_withdraw_dc", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//Commit_withdraw_dcWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) Commit_withdraw_dcWithContext(ctx context.Context, Hash string, Symbol string, Amount string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "commit_withdraw_dc", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//Insert_innerexchange_fee is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) Insert_innerexchange_fee(Hash string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "insert_innerexchange_fee", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//Insert_innerexchange_feeWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *FreezingSys) Insert_innerexchange_feeWithContext(ctx context.Context, Hash string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "insert_innerexchange_fee", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *FreezingSys) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *FreezingSys) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}
func (_obj *FreezingSys) setMap(l int, res *requestf.ResponsePacket, ctx map[string]string, sts map[string]string) {
	if l == 1 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
	} else if l == 2 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
		for k, _ := range sts {
			delete(sts, k)
		}
		for k, v := range res.Status {
			sts[k] = v
		}
	}
}

//AddServant adds servant  for the service.
func (_obj *FreezingSys) AddServant(imp _impFreezingSys, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *FreezingSys) AddServantWithContext(imp _impFreezingSysWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impFreezingSys interface {
	User_into_dc2(Addr string, Symbol string, Hash string, Amount string, Type int32) (ret bool, err error)
	Commit_withdraw_dc(Hash string, Symbol string, Amount string, MinerCost string, Rsp *string) (ret bool, err error)
	Insert_innerexchange_fee(Hash string, MinerCost string, Rsp *string) (ret bool, err error)
}
type _impFreezingSysWithContext interface {
	User_into_dc2(ctx context.Context, Addr string, Symbol string, Hash string, Amount string, Type int32) (ret bool, err error)
	Commit_withdraw_dc(ctx context.Context, Hash string, Symbol string, Amount string, MinerCost string, Rsp *string) (ret bool, err error)
	Insert_innerexchange_fee(ctx context.Context, Hash string, MinerCost string, Rsp *string) (ret bool, err error)
}

func user_into_dc2(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Addr string
	err = _is.Read_string(&Addr, 1, true)
	if err != nil {
		return err
	}
	var Symbol string
	err = _is.Read_string(&Symbol, 2, true)
	if err != nil {
		return err
	}
	var Hash string
	err = _is.Read_string(&Hash, 3, true)
	if err != nil {
		return err
	}
	var Amount string
	err = _is.Read_string(&Amount, 4, true)
	if err != nil {
		return err
	}
	var Type int32
	err = _is.Read_int32(&Type, 5, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impFreezingSys)
		ret, err := _imp.User_into_dc2(Addr, Symbol, Hash, Amount, Type)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impFreezingSysWithContext)
		ret, err := _imp.User_into_dc2(ctx, Addr, Symbol, Hash, Amount, Type)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func commit_withdraw_dc(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Hash string
	err = _is.Read_string(&Hash, 1, true)
	if err != nil {
		return err
	}
	var Symbol string
	err = _is.Read_string(&Symbol, 2, true)
	if err != nil {
		return err
	}
	var Amount string
	err = _is.Read_string(&Amount, 3, true)
	if err != nil {
		return err
	}
	var MinerCost string
	err = _is.Read_string(&MinerCost, 4, true)
	if err != nil {
		return err
	}
	var Rsp string
	if withContext == false {
		_imp := _val.(_impFreezingSys)
		ret, err := _imp.Commit_withdraw_dc(Hash, Symbol, Amount, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impFreezingSysWithContext)
		ret, err := _imp.Commit_withdraw_dc(ctx, Hash, Symbol, Amount, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_string(Rsp, 5)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func insert_innerexchange_fee(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Hash string
	err = _is.Read_string(&Hash, 1, true)
	if err != nil {
		return err
	}
	var MinerCost string
	err = _is.Read_string(&MinerCost, 2, true)
	if err != nil {
		return err
	}
	var Rsp string
	if withContext == false {
		_imp := _val.(_impFreezingSys)
		ret, err := _imp.Insert_innerexchange_fee(Hash, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impFreezingSysWithContext)
		ret, err := _imp.Insert_innerexchange_fee(ctx, Hash, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_string(Rsp, 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *FreezingSys) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "user_into_dc2":
		err := user_into_dc2(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "commit_withdraw_dc":
		err := commit_withdraw_dc(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "insert_innerexchange_fee":
		err := insert_innerexchange_fee(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}
